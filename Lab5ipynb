{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNXhwspaXvUaksA7ezoH6Ig"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":70,"metadata":{"id":"MFQA6oZkoLn2","executionInfo":{"status":"ok","timestamp":1673258239754,"user_tz":-330,"elapsed":485,"user":{"displayName":"CE040_ Jay_Gajera","userId":"06553143479182270893"}}},"outputs":[],"source":["from sklearn import preprocessing\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.model_selection import train_test_split\n","import pandas as pd\n","from sklearn.tree import DecisionTreeClassifier\n","import sklearn.metrics as metrics"]},{"cell_type":"code","source":["#Predictor variables\n","Outlook = ['Rainy', 'Rainy', 'Overcast', 'Sunny', 'Sunny', 'Sunny','Overcast',\n","'Rainy', 'Rainy', 'Sunny', 'Rainy','Overcast', 'Overcast','Sunny']\n","Temperature = ['Hot', 'Hot', 'Hot', 'Mild', 'Cool', 'Cool', 'Cool',\n","'Mild', 'Cool', 'Mild', 'Mild', 'Mild', 'Hot', 'Mild']\n","Humidity = ['High', 'High', 'High', 'High', 'Normal', 'Normal', 'Normal',\n","'High', 'Normal', 'Normal', 'Normal', 'High', 'Normal','High']\n","Wind = ['False', 'True', 'False', 'False', 'False', 'True', 'True',\n","'False', 'False', 'False', 'True', 'True', 'False', 'True']\n","\n","#Class Label:\n","Play = ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No',\n","'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No']"],"metadata":{"id":"q9avBilIoY7a","executionInfo":{"status":"ok","timestamp":1673258240209,"user_tz":-330,"elapsed":9,"user":{"displayName":"CE040_ Jay_Gajera","userId":"06553143479182270893"}}},"execution_count":71,"outputs":[]},{"cell_type":"code","source":["#creating labelEncoder\n","le = preprocessing.LabelEncoder()\n","\n","# Converting string labels into numbers.\n","Outlook_encoded = le.fit_transform(Outlook)\n","Outlook_name_mapping = dict(zip(le.classes_, le.transform(le.classes_)))\n","print(\"Outllok mapping:\",Outlook_name_mapping)\n","Temperature_encoded = le.fit_transform(Temperature)\n","Temperature_name_mapping = dict(zip(le.classes_, le.transform(le.classes_)))\n","print(\"Temperature mapping:\",Temperature_name_mapping)\n","\n","Humidity_encoded = le.fit_transform(Humidity)\n","Humidity_name_mapping = dict(zip(le.classes_, le.transform(le.classes_)))\n","print(\"Humidity mapping:\",Humidity_name_mapping)\n","Wind_encoded = le.fit_transform(Wind)\n","Wind_name_mapping = dict(zip(le.classes_, le.transform(le.classes_)))\n","print(\"Wind mapping:\",Wind_name_mapping)\n","Play_encoded = le.fit_transform(Play)\n","Play_name_mapping = dict(zip(le.classes_, le.transform(le.classes_)))\n","print(\"Play mapping:\",Play_name_mapping)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0yZHFEKRozuJ","executionInfo":{"status":"ok","timestamp":1673258240210,"user_tz":-330,"elapsed":9,"user":{"displayName":"CE040_ Jay_Gajera","userId":"06553143479182270893"}},"outputId":"60c44aa4-838a-4d32-cd56-72265367f49f"},"execution_count":72,"outputs":[{"output_type":"stream","name":"stdout","text":["Outllok mapping: {'Overcast': 0, 'Rainy': 1, 'Sunny': 2}\n","Temperature mapping: {'Cool': 0, 'Hot': 1, 'Mild': 2}\n","Humidity mapping: {'High': 0, 'Normal': 1}\n","Wind mapping: {'False': 0, 'True': 1}\n","Play mapping: {'No': 0, 'Yes': 1}\n"]}]},{"cell_type":"code","source":["print(\"\\n\\n\")\n","print(\"Weather:\" ,Outlook_encoded)\n","print(\"Temerature:\" ,Temperature_encoded)\n","print(\"Humidity:\" ,Humidity_encoded)\n","print(\"Wind:\" ,Wind_encoded)\n","print(\"Play:\" ,Play_encoded)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3Wdv8CvBpilq","executionInfo":{"status":"ok","timestamp":1673258240210,"user_tz":-330,"elapsed":7,"user":{"displayName":"CE040_ Jay_Gajera","userId":"06553143479182270893"}},"outputId":"75188240-3bd3-4947-9f48-e72c41f0b990"},"execution_count":73,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","\n","\n","Weather: [1 1 0 2 2 2 0 1 1 2 1 0 0 2]\n","Temerature: [1 1 1 2 0 0 0 2 0 2 2 2 1 2]\n","Humidity: [0 0 0 0 1 1 1 0 1 1 1 0 1 0]\n","Wind: [0 1 0 0 0 1 1 0 0 0 1 1 0 1]\n","Play: [0 0 1 1 1 0 1 0 1 1 1 1 1 0]\n"]}]},{"cell_type":"code","source":["features=tuple(zip(Temperature_encoded,Outlook_encoded,Humidity_encoded,Wind_encoded))\n","print(\"Features:\",features)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3I6LR8zzrC1R","executionInfo":{"status":"ok","timestamp":1673258240210,"user_tz":-330,"elapsed":6,"user":{"displayName":"CE040_ Jay_Gajera","userId":"06553143479182270893"}},"outputId":"06d28743-b1e9-4ef0-c5a1-9cd7a6d9d676"},"execution_count":74,"outputs":[{"output_type":"stream","name":"stdout","text":["Features: ((1, 1, 0, 0), (1, 1, 0, 1), (1, 0, 0, 0), (2, 2, 0, 0), (0, 2, 1, 0), (0, 2, 1, 1), (0, 0, 1, 1), (2, 1, 0, 0), (0, 1, 1, 0), (2, 2, 1, 0), (2, 1, 1, 1), (2, 0, 0, 1), (1, 0, 1, 0), (2, 2, 0, 1))\n"]}]},{"cell_type":"code","source":["X=features\n","y=Humidity_encoded\n","X_train, X_test, y_train, y_test = train_test_split(X , y, test_size = 0.8, random_state = 1000)\n"],"metadata":{"id":"B9VsY0edvZAx","executionInfo":{"status":"ok","timestamp":1673258240211,"user_tz":-330,"elapsed":6,"user":{"displayName":"CE040_ Jay_Gajera","userId":"06553143479182270893"}}},"execution_count":75,"outputs":[]},{"cell_type":"code","source":["clf = DecisionTreeClassifier()\n","\n","# Train Decision Tree Classifer\n","clf = clf.fitX_train(,y_train)\n","\n","#Predict the response for test dataset\n","y_pred = clf.predict(X_test)\n","print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wy2HnHdi0MTV","executionInfo":{"status":"ok","timestamp":1673258240211,"user_tz":-330,"elapsed":6,"user":{"displayName":"CE040_ Jay_Gajera","userId":"06553143479182270893"}},"outputId":"97e94515-275c-4601-f3c5-3cf00b3b8c5a"},"execution_count":76,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.4166666666666667\n"]}]},{"cell_type":"code","source":["from six import StringIO  \n","from IPython.display import Image  \n","from sklearn.tree import export_graphviz\n","import pydotplus\n","dot_data = StringIO()\n","export_graphviz(clf, out_file=dot_data,filled=True, rounded=True, special_characters=True, feature_names = 'Wind',class_names=['0','1'])\n","graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \n","graph.write_png('diabetes.png')\n","Image(graph.create_png())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":98},"id":"-hva0jNn0lPk","executionInfo":{"status":"ok","timestamp":1673258240211,"user_tz":-330,"elapsed":5,"user":{"displayName":"CE040_ Jay_Gajera","userId":"06553143479182270893"}},"outputId":"ea0a65b6-e237-415b-b3ad-90d0e6f29f3b"},"execution_count":77,"outputs":[{"output_type":"execute_result","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAIkAAABRCAIAAABpKxLcAAAABmJLR0QA/wD/AP+gvaeTAAARA0lEQVR4nO2da1AT1/vHT+4hWQgkwIAgJNyF2NKh1qagQQUjFgSRiFcUbafSqm2BIopKZ5wiBWoZ7NTpi7ZeagVt8W6d2spFTUG0CiJBVChSgUCIJhGzQCD/F/vv/tZwy2VTqOTzin3Os+c8yTd79uw5zx4IOp0OWJmUECc6ACujYtVm8mLVZvJCNu20vr6+u3fvdnV1qdVqfAN6maDRaA4ODkFBQWw225TzdcagUCgKCwuFQiGZbKKoUxM/P7+0tLT6+nqjvm1Dtent7c3OzmYwGLa2tmvXrj169KhUKlWpVEY1NtWAYfjvv//+5ZdfMjIyfHx8AABLliy5f/++gacbpE1paamHh4ednV1eXp5VD9MYGhq6cOECn8+n0WiZmZkajWbcU8bRZmhoaPv27QQCITk5ubOzE6c4py4DAwP79++3t7cXCAQymWxs57G0ef78+bJly6hU6sGDB3GNcKojlUp9fHy4XO7Yd6BRtRkcHFy2bBmbza6srLRAeFMduVweFhbm6ur66NGj0XxG1Wb79u0UCuXy5cuWic2KTqVSzZw5Mzg4WK1Wj+gwsjY///wzgUCwdFe2YMECFotlCef/Ci0tLc7OzitXrhyxdARtent7PTw8kpOTLRzYRGrT1NSUkJDg6OhIpVL9/PxycnIGBwdx9Dec8+fPAwDKysqGF42gze7du21tbdvb23FpexLS0dHh5OQUGRn58OFDGIZPnToFQVBKSgpe/sYSHR0dFBQ0MDCgZ9fXRqFQMBiMvLw8vBqehLz//vs2NjZyuRy15ObmEggEqVSKi7+xNDU1USiUI0eO6Nn1tSksLLS1tcXrAbOoqMjX15dKpXK53M8+++zkyZMAgNOnTyOl2G4qKirK29u7qalpyZIlDg4OdnZ2YWFh1dXVaFU49mkcDicqKgpruXfvHgBgz549uPibgFgsDgsL0zPqz0OfPHkyLi7O1tbW/EmkAwcObN26NSYmpqWlpays7O7duzt27AAAUKnU4c5UKlUul69ateq9995ra2u7du1aR0fH0qVLYRgeuxW5XE4YncbGRj3/tra2np6ewMBArNHHx4dCody8eXN4/cb6m8aaNWskEolMJsMaX9AGhmGJRLJo0SJc2isoKOByufn5+dOmTeNyuQcPHtRoNGP4K5XK9PT0xYsXM5lMPp+fkpLS3t5eV1c3diuOjo5j/B4DAgL0/JHP7+joiDUSiUQ2m6331ZjmbxoREREkEqm8vPyFVrAHUql0YGDgtddeM78xlUrV3Nw8Z84cIvH/m6BQKPHx8eOGiP7t6uoKAGhvbzc/GCzI72P4tUulUp8/f26+v2kwGAx/f/87d+5gjS9o09HRAQCYPn26+Y11dnYCAJydnbFGX1/fMU4hkUgcDud/kRGJAACtVmt+MFgYDAYAoL+/X8/e19eHFJnpbzLu7u7I94/ygja9vb0AACaTaX5LyM+NQCBgjXqHEwJyOXZ3d2ONWq1WoVC4ubmZ728yEAQ9e/YMa3lBG51OB3D6BpEOuqenB2tsbm42v2Y9jB0LTJs2zcXF5e7du1ijVCrVarWzZs0aXr+x/iZDIBB0L+Y8WSpfwM3NzcXFpaqqCrUMDAz89NNPuDdk7FgAALBq1aqKigrspVBSUkImk1esWDFiE8b644UFczlSUlKkUun27du7u7tbW1tXrFjBYrEs15zh7Nixw9HRMTEx8cGDBzAMFxcXFxQU7Ny508PDA3H47bffCARCenq6gf4WwoLL/llZWTAMHzp06Msvv+TxeFu2bGEwGMnJyRN+1+FwONeuXduxY4dAIFCpVH5+foWFhZs2bcLLHzewPUBJSQkwMrvDKAoKCgAAEonEck38dxGLxWKxGGuxYJ926NCh1atXYx/sa2pqqFRqUFCQ5Rp9mbBgn8ZisY4dO0aj0XJychgMRklJyYkTJ7Zu3WpnZ2e5Rl8mLKhNXFxcaWlpfn5+QECARqPx8fHJzc1NS0uzXIsvGZZNAYyLi4uLi7NoEy8x1nzoycvLoM2iRYsgCJroKPDnZdBmUnHv3r2EhAQ2m81gMAIDA7Ozs/VmyQzHqg2eNDQ0hISEdHV1VVZWymSy7Ozs/Pz8xMRE02qzaoMnmZmZWq22tLSUz+fb2tomJiampKRcuHChsrLShNpM0UahUHz88cfe3t42NjbOzs6LFy++fv061uHy5csRERF2dnYMBmPGjBk5OTl9fX1o6eLFi318fOrq6ubNmwdBkIODw9q1a9VqdUlJSXBwMIPB8PLyKioqQv3nzp3r4eFx69at8PBwCIKYTOaCBQtqa2tHC+/27dtxcXEcDodGo3l5eaWnpyuVSsODN4fIyMjc3FzsImlISAgweQIeO0lg4JxNZGSkm5ubRCLRaDTNzc3x8fEQBN27dw8pvXLlCplMXr58+ePHj589e/bDDz8QCIQPP/wQPT02NpbFYoWGhlZVVanV6ry8PACAUCgUiUTNzc1PnjxZs2YNAKCqqgrxj4iIoNPpr776allZWW9vb11dnYeHB4fD6e7uRhxEIhGTyUT+rqmpsbGxiYmJaWxsVKvVZ8+edXZ2fuONN9AMo7GDx6K3ZqOHgUk2yKerqKgY13P4nI3R2mg0GiKR+M4776AWpVLJ4XCKioqQw/T0dAiCWltbUYfw8HBsikxsbCwA4Ny5c8jhwMAABEEUCgXNiEOWZnNycpBDkUgEADh69ChaQ3FxMQCgoKAAdUC1mTNnjpubGwzDqPO3336Lnj5u8PjS2dk5bdo0Pp+v1WrHdcZBm8HBQRcXF0dHx9LS0v7+fkNCTE5OBgAoFArkENHm6dOnqIOHh4evry962NXVBQDYunUrcohog00PQ5IokpKSUAdEG6VSSSQS16xZg2398ePHaG0mBG8yPT09s2fPZjKZf/75pyH+OMx1EonEs2fPstns+Ph4e3v7iIiIgoIChUKBOsAwvG/fvtDQUFdXVxqNRiaTv//+ewDA4OAg6kMikbBrOQQCAftGJLKIgPWnUCjYVALEeXiaS3t7+9DQENKLoiArx21tbYYEjxcPHz4UCASNjY3nzp0zOTfGlLHA66+/3tjYeOXKldTUVJVK9cknn/j6+t66dQspTUxMTE9PX7hw4dWrVxUKBQzDGzZsMC24/0VJHGHtXM+Igu2yUEpLSw0JHhckEsmbb77Z399/9erV8PBw0yvCfgDT1m8kEgmZTI6NjdX904GsWLEC67BgwQIAAHrrjo2NJZFIWAdPT8/Zs2ejh8hN+IMPPkAOkT4N2wci+Sjr169HHZA+Ta1WE4nEyMhI04LXw7SxwB9//AFB0KxZs8Z9LU0PHPq0iooKd3d37BBWIBC4uroiaRvIWBk7iJRKpRUVFeCfH7vJXLp0Cf27rKwMACAUCvV8IAiaM2dOeXk5koGFcOXKlcDAwBs3bowbvB4mZCL89ddfUVFR/v7+v//+u17+lwkYrc2sWbPIZPK6deuqq6thGFYoFPv27Wtra9u4cSMAwNPT08vL6+TJk/X19TAMX7hwIT4+XiwWAwBqamqwtxCjsLGx2bNnz6VLl54/f15XV7dt2zYXF5fly5cP9/z8889JJFJ0dHRjYyMMw+Xl5UlJSTQajc/njxu8+WzevBmG4RMnTuCStGxKn/bo0aMNGzZMnz6dSqU6OjqGhYWVlJSgpbdv3xYKhRAE2dvbR0VF1dbWPnz4MCAggEwmZ2Vl6Uzq01gs1s2bN5FnVQaDERER0dDQgPpjx9A6ne7mzZuxsbFsNptMJru7u6elpfX09BgYvDkg2X0jsnHjxnFPx2EM/e8jEokgCJroKCzOv5ovgCO6KbmR2H9Dm6mJVZvJy39gy6CLFy9OdAgTg/W6mbxMvDYv62q/+Uy8NpMNYxf879+/LxaLnZycaDSav7//3r17h4aGcInEqs0LGLvg39nZGRoaqlQqq6urVSpVXl5eTk7O5s2b8YkG+7AzIc+eek/1E0tMTAyNRkOnZXU6XWpqKhh94RLHrQfwf/acO3cug8HQu+qzsrIIBAIyxQnGSx/AEhYW5uLigrV89dVXBAIB+wLx2OkAZmLsgn9JSUl4eDh2bWnp0qU6nQ6Xt8DM1SYpKUmj0Zw9exZrLC4u5vF4c+fOBQBcvXpVJBJxOJzGxsbu7u6dO3fu3Llz27ZtpjV348aNt956a2hoSCKR9PT0FBUVHTlyZOHChSO+smvs64YAgC1btnz00UdYC7Lq4eXlNdzZ0lsPmKuNWCym0+lIZ4hQVVXV3Ny8bt06ZPny9OnTdDod2WWAyWSuXr1aKBQePHjQtOZSU1PZbPaJEyf8/f0hCIqOjt67d+/169ePHz8+3NmESX49ZDJZYWEhn88PDQ0dsRRYcusBc7VhsVhLliy5ePGiSqVCLD/++COBQEhKSkIO8/Pz1Wo19vU7Ho+nVCqfPHlibFsqleratWvz5s2j0WioEdmporq62qyPMRIKhSI2NlapVB4+fJhEIg13sPTWAy9oQ6fTwT/rY4aTlJTU19d36tQpAMDg4ODx48eFQiGPx0NKDUkfMJBx0wFwxJAFf3y3HtBoNDY2NljLC9og9zS5XG5UpSKRyNnZGelVLl++LJPJ1q9fj5binj4wdjoALhi44I/v1gNyuVxvi+8XtEG6YL2dO8aFTCavXLny119/ffr06bFjxyAISkhIQIra29vPnDmTmJiYnZ3t7e3NZDLJZHJra+toVZFIJL3rCdtxu7u7E4nEMU7Xw4SxAACgqqpKJBLxeLzq6mpktXQ0cNx6QKfTNTQ06N8C9X6Afn5+GRkZxo7NkWHJ4cOHHRwc0BQLnU6HDD03b96MWhoaGpA92bu6uhAL9vlGLBYTiUTs3skCgQBgtuUTCoUUCqWjowN1qKysnDFjRk1NjbExj0hLS4u9vX1ISIiBu5SlpqbS6XT0s+h0uqysLOT3Z1S7SN5vbW0t1qivTWpqqre399DQkFFV63S6oKAgb29vAEB5eTlqHBwc9PLycnNzu3PnjkajOX/+fEBAwMqVKwEA58+fR7Idsdp89913AIDMzMynT592dHSkpqYiI1RUm6qqKjqdHhISIpVKNRpNWVkZl8sNDg42ZCtsQ3j77bfpdHpzc/NoDkhKSVpaGnIol8vd3d3nzZt3//59jUaDvN/66aefGttuRkaGp6ennlFfm/r6euSLM7b23NxcAACPx9PTddz0Aaw2Wq129+7dXC6XRqPxeLy9e/ci2+FdvHgRrXDsdABzMGTBX08bnU7X2tq6evVqZCtPPp9/4MABE9p1cnIarugIMzQxMTF8Pn/49pFWLMSuXbtYLNbwfLYRtHnw4AGdTt+/f/+/EthUp7W1lcFg7Nu3b3jRyDObmZmZ9vb2eO0VamU0+vv758+fHxAQMGLi/MjaaDQagUDA4/GwIxAruLNp0yYIgm7fvj1i6agrAjKZjMvlhoWFKZVKi8U2pdmzZw+RSDxz5sxoDmOt1tTX17u6uvL5/JaWFvxDm8L09/e/++67JBLp66+/HsNtnJW0R48eBQcHOzs7mzCqtjIiLS0t8+fPhyBojCsGYfxVTrVajTwtRkdHNzU14RThVKS3t3fXrl02NjYBAQGj3WOwGLoCXVZWNnPmTAqFkpCQcPr06d7eXvPinEIMDQ1dv349IyPDycmJxWJ98cUXBr7OqL9/5xhotdri4uJvvvlGIpGQSCR/f383NzfrhltjAMNwd3d3Q0ODSqXy9PRMTk5OSUkx/L0cI7RBkclk5eXltbW1MpnM+v89x4BOpzs4OAQGBgoEgldeecXY003Rxsq/gzU/bfJi1WbyYtVm8vJ/VpFGmJCQExQAAAAASUVORK5CYII=\n","text/plain":["<IPython.core.display.Image object>"]},"metadata":{},"execution_count":77}]}]}